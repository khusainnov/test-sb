// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: upload.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UploadConfigServiceClient is the client API for UploadConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UploadConfigServiceClient interface {
	UploadConfig(ctx context.Context, in *Config, opts ...grpc.CallOption) (*ConfigBodyResponse, error)
	GetConfig(ctx context.Context, in *ConfigName, opts ...grpc.CallOption) (*ConfigBody, error)
	UpdateConfig(ctx context.Context, in *Config, opts ...grpc.CallOption) (*ConfigBodyResponse, error)
	DeleteConfig(ctx context.Context, in *ConfigName, opts ...grpc.CallOption) (*ConfigBodyResponse, error)
}

type uploadConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUploadConfigServiceClient(cc grpc.ClientConnInterface) UploadConfigServiceClient {
	return &uploadConfigServiceClient{cc}
}

func (c *uploadConfigServiceClient) UploadConfig(ctx context.Context, in *Config, opts ...grpc.CallOption) (*ConfigBodyResponse, error) {
	out := new(ConfigBodyResponse)
	err := c.cc.Invoke(ctx, "/UploadConfigService/UploadConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadConfigServiceClient) GetConfig(ctx context.Context, in *ConfigName, opts ...grpc.CallOption) (*ConfigBody, error) {
	out := new(ConfigBody)
	err := c.cc.Invoke(ctx, "/UploadConfigService/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadConfigServiceClient) UpdateConfig(ctx context.Context, in *Config, opts ...grpc.CallOption) (*ConfigBodyResponse, error) {
	out := new(ConfigBodyResponse)
	err := c.cc.Invoke(ctx, "/UploadConfigService/UpdateConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadConfigServiceClient) DeleteConfig(ctx context.Context, in *ConfigName, opts ...grpc.CallOption) (*ConfigBodyResponse, error) {
	out := new(ConfigBodyResponse)
	err := c.cc.Invoke(ctx, "/UploadConfigService/DeleteConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UploadConfigServiceServer is the server API for UploadConfigService service.
// All implementations must embed UnimplementedUploadConfigServiceServer
// for forward compatibility
type UploadConfigServiceServer interface {
	UploadConfig(context.Context, *Config) (*ConfigBodyResponse, error)
	GetConfig(context.Context, *ConfigName) (*ConfigBody, error)
	UpdateConfig(context.Context, *Config) (*ConfigBodyResponse, error)
	DeleteConfig(context.Context, *ConfigName) (*ConfigBodyResponse, error)
	mustEmbedUnimplementedUploadConfigServiceServer()
}

// UnimplementedUploadConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUploadConfigServiceServer struct {
}

func (UnimplementedUploadConfigServiceServer) UploadConfig(context.Context, *Config) (*ConfigBodyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadConfig not implemented")
}
func (UnimplementedUploadConfigServiceServer) GetConfig(context.Context, *ConfigName) (*ConfigBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedUploadConfigServiceServer) UpdateConfig(context.Context, *Config) (*ConfigBodyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfig not implemented")
}
func (UnimplementedUploadConfigServiceServer) DeleteConfig(context.Context, *ConfigName) (*ConfigBodyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConfig not implemented")
}
func (UnimplementedUploadConfigServiceServer) mustEmbedUnimplementedUploadConfigServiceServer() {}

// UnsafeUploadConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UploadConfigServiceServer will
// result in compilation errors.
type UnsafeUploadConfigServiceServer interface {
	mustEmbedUnimplementedUploadConfigServiceServer()
}

func RegisterUploadConfigServiceServer(s grpc.ServiceRegistrar, srv UploadConfigServiceServer) {
	s.RegisterService(&UploadConfigService_ServiceDesc, srv)
}

func _UploadConfigService_UploadConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Config)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadConfigServiceServer).UploadConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UploadConfigService/UploadConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadConfigServiceServer).UploadConfig(ctx, req.(*Config))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploadConfigService_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadConfigServiceServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UploadConfigService/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadConfigServiceServer).GetConfig(ctx, req.(*ConfigName))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploadConfigService_UpdateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Config)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadConfigServiceServer).UpdateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UploadConfigService/UpdateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadConfigServiceServer).UpdateConfig(ctx, req.(*Config))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploadConfigService_DeleteConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadConfigServiceServer).DeleteConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UploadConfigService/DeleteConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadConfigServiceServer).DeleteConfig(ctx, req.(*ConfigName))
	}
	return interceptor(ctx, in, info, handler)
}

// UploadConfigService_ServiceDesc is the grpc.ServiceDesc for UploadConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UploadConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UploadConfigService",
	HandlerType: (*UploadConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadConfig",
			Handler:    _UploadConfigService_UploadConfig_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _UploadConfigService_GetConfig_Handler,
		},
		{
			MethodName: "UpdateConfig",
			Handler:    _UploadConfigService_UpdateConfig_Handler,
		},
		{
			MethodName: "DeleteConfig",
			Handler:    _UploadConfigService_DeleteConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "upload.proto",
}
